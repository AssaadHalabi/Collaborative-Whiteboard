// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String    @unique
  email     String    @unique
  boards    Board[]   @relation("UserBoards")
  drawings  Drawing[] @relation("UserDrawings")
  images    Image[]   @relation("UserImages")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Board {
  id        Int       @id @default(autoincrement())
  title     String
  users     User[]    @relation("UserBoards")
  drawings  Drawing[]
  images    Image[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Drawing {
  id        Int         @id @default(autoincrement())
  userId    String
  boardId   Int
  user      User        @relation("UserDrawings", fields: [userId], references: [id])
  board     Board       @relation(fields: [boardId], references: [id])
  type      DrawingType
  data      Json // Store drawing data (lines, text, shapes) as JSON
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Image {
  id        String   @id @default(uuid())
  userId    String
  boardId   Int
  user      User     @relation("UserImages", fields: [userId], references: [id])
  board     Board    @relation(fields: [boardId], references: [id])
  url       String // Store the URL of the image
  position  Json // Store position data as JSON (e.g., { x: 0, y: 0 })
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DrawingType {
  LINE
  TEXT
  SHAPE
}
